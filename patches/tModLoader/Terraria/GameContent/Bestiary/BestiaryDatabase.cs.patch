--- src/Terraria/Terraria/GameContent/Bestiary/BestiaryDatabase.cs
+++ src/tModLoader/Terraria/GameContent/Bestiary/BestiaryDatabase.cs
@@ -1,9 +_,10 @@
 using System.Collections.Generic;
 using Terraria.GameContent.ItemDropRules;
+using Terraria.ModLoader;
 
 namespace Terraria.GameContent.Bestiary
 {
-	public class BestiaryDatabase
+	public partial class BestiaryDatabase
 	{
 		public delegate void BestiaryEntriesPass(BestiaryEntry entry);
 
@@ -11,6 +_,7 @@
 		private List<IBestiaryEntryFilter> _filters = new List<IBestiaryEntryFilter>();
 		private List<IBestiarySortStep> _sortSteps = new List<IBestiarySortStep>();
 		private Dictionary<int, BestiaryEntry> _byNpcId = new Dictionary<int, BestiaryEntry>();
+		private Dictionary<Mod, List<BestiaryEntry>> _byMod = new Dictionary<Mod, List<BestiaryEntry>>();
 		private BestiaryEntry _trashEntry = new BestiaryEntry();
 
 		public List<BestiaryEntry> Entries => _entries;
@@ -26,6 +_,13 @@
 				if (nPCNetIdBestiaryInfoElement != null)
 					_byNpcId[nPCNetIdBestiaryInfoElement.NetId] = entry;
 			}
+			if(ModLoader.ModLoader.Mods.Length > 0) {
+				Mod mod = ID.ContentSamples.NpcsByNetId[((NPCNetIdBestiaryInfoElement)entry.Info[0]).NetId].ModNPC?.Mod;
+				if (_byMod.ContainsKey(mod ?? ModLoader.ModLoader.Mods[0]))
+					_byMod[mod ?? ModLoader.ModLoader.Mods[0]].Add(entry);
+				else
+					_byMod.Add(mod ?? ModLoader.ModLoader.Mods[0], new List<BestiaryEntry> { entry });
+			}
 
 			return entry;
 		}
@@ -49,7 +_,7 @@
 		}
 
 		public void Merge(ItemDropDatabase dropsDatabase) {
-			for (int i = -65; i < 665; i++) {
+			for (int i = -65; i < NPCLoader.NPCCount; i++) {
 				ExtractDropsForNPC(dropsDatabase, i);
 			}
 		}
